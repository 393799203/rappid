v2.1.0 - 03-31-2017
  * update jQuery v3.1.1
  * Geometry - improve Point/Rect prototype.round(precision) - fix coordinates being converted to a string after round() with a precision called, allow negative precision
  * Geometry - add Rect inflate(), bottomLine(), topLine(), leftLine() and rightLine()
  * Geometry - Point offset() and difference() accept both a point and x,y coordinates
  * Geometry - add Line equals()
  * Geometry - Line intersection() renamed to intersect() and calculates intersection points with another line or rectangle
  * Vectorizer - stop accessing deprecated `nodeName` and `nodeValue` attribute properties
  * Vectorizer - add prototype.contains() method
  * Vectorizer - add matrixToTransformString() method as opposed to transformStringToMatrix()
  * Vectorizer - add ensureId() method
  * Vectorizer - add appendTo() method
  * Vectorizer - V(node); does not set automatically id on the node anymore
  * Vectorizer - text() with content doesn't set invalid display: null on node anymore
  * Vectorizer - fix convertRectToPathData() for rounded rectangles
  * dia.attributes - add namespace for defining custom attributes, allow camelCase attribute style
  * dia.attributes - new attributes `sourceMarker`, `targetMarker`, `vertexMarker`, `textWrap`, `refRx`, `refRy`, `refCx`, `refCy`, `refX2`, `refY2`
  * dia.attributes - improve `text` attribute performance on cellView update
  * dia.attributes - fix mixing various attributes (e.g. `transform`, `refX` and `refDx` now add up)
  * dia.Paper - add defineGradient(), defineFilter(), defineMarker() and isDefined() methods
  * dia.Paper - fix async rendering when cell was previously member of different graph.
  * dia.Paper - improve grid precision, added new grid patterns, update drawGrid() options definition.
  * dia.Paper - `blank:pointerup` event is fired only after a preceeding `blank:pointerdown` event
  * dia.Paper - add paperToLocalPoint(), clientToLocalPoint(), pageToLocalPoint(), localToPaperPoint(), localToPagePoint() and localToClientPoint().
  * dia.Paper - add paperToLocalRect(), clientToLocalRect(), pageToLocalRect(), localToPaperRect(), localToClientRect() and localToPageRect()
  * dia.Paper - add clientOffset() and pageOffset()
  * dia.Cell - make cell.attr() work as getter
  * dia.Cell - prop(), removeProp() accept also path defined as an array
  * dia.Element - add size(), getPortPositions() methods
  * dia.Element - rotate() doesn't translate embeddeded cells anymore
  * dia.Link - allow arbitrary shapes for labels
  * dia.LinkView - fix link translating when embedded and has no marker
  * dia.LinkView - set correct port and selector on the link
  * mvc.View - prevent extend() from modifying prototype propertires
  * ports events `ports:add` and `ports:remove` triggered when port is added to element/removed from element
  * utils - fix toggleFullScreen() in IE
  * utils - breakText() takes the lineHeight style into account
  * util - change cells() wrapper also accept a single cell
  * highlighter.Stroke - allow multiple strokes to be applied to a single cellView magnet, prevent memory leaks
  * connectors.jumpover - fix on graph `reset`
  * ui.PaperScroller - add `transitionToPoint()`, `transitionToRect()`, `lock()` and `unlock()`
  * ui.PaperScroller - fix autoresize in async paper mode
  * ui.TextEditor: deselect text on remove
  * ui.Stencil - capture pointer events for magnet=passive
  * ui.Widgets - fix `toggle` change event multiple triggering
  * ui.FreeTransform - add `clearAll`, `clearOnBlankPointerdown` options
  * ui.Halo - add `clearOnBlankPointerdown` option
  * storage.Local - fix duplicate keys in index 
  * QAD - rewrite demo to use port API
  * Constellation - add new transitions demo
v2.0.1 - 12-01-2016
  * make compatibility changes towards jQuery 3.1
  * shapes.TextBlock - fix `SVGForeignObject` detection
  * dia.Graph - fix graph references stored on cells (when a cell added to another graph)
  * layout.GridLayout - fix cell's graph references overriden by the layout
  * Vectorizer - remove deprecated attributes' `nodeValue` and `nodeName` calls
  * Vectorizer - fix `convertToPathData()` for polyline.
  * KitchenSink - add various port shapes
  * KitchenSink - improve mousewheel zooming
  * BPMN Editor - fix stencil tooltips
  * joint.ui.Inspector - add missing 'equal' primitive documentation
  * ui.Navigator - make sure links are always rendered after elements
  * ui.Selectbox - fix the default option target
  * dia.CommandManager - account for graph changes
  * layout.TreeLayout - fix prevSiblingGap for first BR/BL sibling
  * dia.CommandManager - make sure changes on newly added cells are executed after the element is added

v2.0.0 - 09-20-2016
  * Update dependencies - jQuery 2.2.4, Backbone 1.2.3
  * Rappid works with Content-Security-Policy header now
  * CSS class prefix `joint-` for all Rappid views (breaking change)
  * introduces themes for Rappid views (default, material, modern, dark)
  * ui.Keyboard - new plugin for keyboard handling
  * ui.Toolbar - new plugin for creating toolbars
  * ui.Selection (previously ui.SelectionView) - reacts to the underlaying collection, Simplified API
  * ui.Selection - added `allowTranslation` and `rotateAngleGrid`option
  * ui.Selection - add `resize` handle for group resizing
  * layout.TreeLayout - added BR,BL,TR,TL layouts
  * layout.TreeLayout - add `prevSiblingGap` and `nextSiblingGap` element parameters
  * layout.TreeLayout - `filter` is applied also on root elements
  * layout.DirectedGraph - returns a bbox and accept an array of elements
  * layout.GridLayout.layout() - accept an array of elements
  * layout.GridLayout.layout() - add `marginX` and `marginY` options
  * ui.Stencil - integrates layout.GridLayout for laying out the elements
  * ui.Inspector - added static helper create/close, save open/closed groups state
  * ui.Inspector - added 'equal' operator, added `content-editable` input
  * ui.Tooltip - simplify initialization - one rules them all, settings is read from the the DOM element attributes
  * dia.CommandManager - allow passing original options when undo/redo
  * ui.PaperScroller - do not use margins & padding to position the paper inside the paperScroller
  * com.ChannelHub.route - supports async behavior
  * ui.Clipboard - allow pasting cells multiple times
  * ui.Clipboard - add `cutElements` method
  * ui.Halo - supports links now
  * ui.Halo - added `bbox` option for defining the halo size and position.
  * ui.SelectBox - element with options respects the viewport boundaries
  * dia.LinkView - unify `link:options` event signature with the rest of events (breaking change)
  * dia.ElementView - fix resizing without scalable group, re-render element when markup change
  * dia.Element - make it easy to add ports to an arbitrary element, introduced API for ports manipulation
  * shapes.devs.Model - uses new port API internally. shapes.basic.PortsViewInterface, shapes.basic.PortsInterface are marked as `deprecated`
  * layout.Port - various layouts for positioning ports
  * layout.PortLabel - various layouts for positioning labels relatively to ports
  * util.deepSupplement, util.supplement, util.mixin, util.deepMixin marked as `deprecated`. Use lodash _.defaultsDeep, _.defaults, _.assign, _.mixin instead
  * Added new utility method util.template(html) to be used the same as underscore/lodash's _.template() method
  * Update/improve the documentation
  * other bug fixes and improvements
  
  v1.7.2 - 07-04-2016
  * ui.Inspector: fix option `multiple` for select input
  * ui.Selection: can be used without passing in a model
  * ui.PaperScroller: fix getVisibleArea() for zoomed papers
  * ui.Halo: Fix cloning/forking/linking with async rendering
  * com.Channel: support async behaviour, fix infinite notify bug
  * dia.Graph: findModelsInArea accept `rect` as a pure object
  * ui.Clipboard: fix pasting order of cells when useLocalStorage enabled
  * utils: prevent FF from throwing an uncaught exception when element is not measurable in breakText()
  * ui.Tooltip: respects viewport in IE
  * fix white-space characters with ISO-8859-1
  * update jQuery to v2.2.4

v1.7.1 - 03-03-2016
  * format.SVG: Fix invalid XML entity in Safari
  * shapes.BPMN: Fixes for Internet Explorer
  * ui.Clipboard: Fix for copy/paste between tabs
  * ui.Lightbox: Position and resize when image is loaded
  * ui.SelectionView: improve rotating, fix rotating with negative coordinates, add rotateAngleGrid option

v1.7.0 - 12-19-2015
  * dia.Graph introduces new functions for traversing graphs: dfs(), bfs(), search(), isSuccessor(), isPredecessor(), getPredecessors(), getSuccessors(), isNeighbor(), isSource(), isSink(), getSources(), getSinks(), getSubgraph(), getFirstCell(), getLastCell() and getCells()
  * new functions for cloning cells dia.Graph.cloneCells(), dia.Graph.cloneSubgraph()
  * dia.Element.resize() function has been extended with 'direction' option allowing for resizing to any side
  * new convenient methods for getting source/target elements added to dia.Link: getSourceElement() and getTargetElement()
  * dia.Paper has a new option 'multiLinks' that when set to false, prevents from creating multiple links between the same elements
  * dia.Paper has a new option function 'guard' that allows for preventing the paper from handling UI events
  * dia.Paper.findViewsInArea() has been extended with 'strict' option that when set, returns only views that are contained within the area passed in the argument
  * Vectorizer adds a new method 'transformPoint()' for a convenient way transform points via SVG transformation matrices
  * Geometry adds a new function rect.union()
  * new utility function added: joint.util.setAttributesBySelector() for setting attributes on DOM elements referenced by a selector
  * dia.Element and dia.Link has a new function getAncestors() that returns an array of ancestor cells
  * dia.Link has a new method hasLoop() for checking whether the link is a loop-link
  * dia.LinkView enables for setting a custom markup for its secondary tools (enabled via the 'doubleLinkTools' option)
  * dia.Graph getNeighbors() function extended with 'inbound' and 'outbound' options
  * dia.Graph has a new translate() method for translating all elements in the graph
  * ui.TextEditor extended with a new advanced option 'textareaAttributes' that can be useful in rare sitations such as for compatibility with jQuery UI
  * ui.TextEditor now uses native text selections which are way faster and better looking and 'useNativeSelection' option as a way to disable native selections and fallback to the old selections
  * ui.Halo adds new convenient methods addHandles() and removeHandles() for adding/removing all handles in one go
  * ui.Halo introduces 'pieToggles' option for setting more toggle buttons for the 'pie' Halo type and toggleState() for changing the state of the pie menu
  * routers.manhattan introduces new options 'startDirections', 'endDirections' to control what direction a link can start/end; and 'excludeTypes' to ignore certain element types as obstacles
  * routers and connectors can now be defined directly on links as functions
  * layout.TreeLayout has been improved and offers not only left-to-right but also right-to-left, top-to-bottom and bottom-to-top layouts, even on a per-node basis!
  * layout.TreeLayout reads element attributes siblingRank, direction, margin and offset (that can also be re-mapped) allowing for a fine control of the layout engine
  * layout.DirectedGraph adds a new option 'resizeClusters' to resize and reposition clusters so that they fit their children
  * ui.PaperScroller has new functions scroll(), scrollToElement() and centerElement() for programmatic scrolling of the paper viewport
  * ui.SelectBox has new methods enable(), disable() and isDisabled()
  * methods added to dia.Paper by format.Raster plugin (toPNG(), toJPEG()) accept an object in the 'padding' option (with top/bottom/left/right) for setting different padding for each side
  * ui.SelectionView adds 'strictSelection' option that when set, selects only elements that are fully contained in the selected area (instead of just intersecting it)
  * service icon added to BPMN shapes
  * links are now much faster when used with manhattan router
  * fixed a critical bug in upcoming Google Chrome which removed the native getTransformToElement() method on SVG elements
  * other bug fixes and improvements

v1.6.0 - 09-08-2015
  * ui.FlashMessage new widget for displaying flash messages
  * ui.Ligthbox new widget for displaying lightboxes
  * ui.ContextToolbar widget plugin for displaying small toolbar below HTML/SVG elements
  * ui.Popup new widget for displaying arbitrary HTML in a popup
  * ui.SelectBox marks selected item as hovered right after open
  * ui.SelectBox adds placeholder option
  * ui.SelectBox adds selectBoxOptionsClass for adding CSS class to the generated container
  * ui.TextEditor adds support for rich-text editing and easier setup
  * ui.TextEditor auto-detecting URLs in text and their annotation
  * ui.TextEditor adds placeholder option
  * ui.TextEditor adds new selection getters getSelectionStart(), getSelectionEnd(), getSelectionRange(), getSelectionLength(), getSelection()
  * ui.TextEditor select all text on triple-click
  * ui.TextEditor adds 'focus' option for disabling focus to be placed on the internal textarea
  * ui.TextEditor passes 'textEditor' client ID when setting properties on cells
  * ui.TextEditor introduces new 'textareaAttributes' option for defining custom attributes on the internal textarea (can be used to fix jQuery UI compatibility)
  * ui.TextEditor was completely refactored overall. The old API still works but an easier to use API was introduced
  * ui.Inspector adds multiOpenGroups option enabling multiple groups to be open at the same time
  * ui.Inspector triggers group:close and group:open events to notify when groups get closed/opened
  * ui.Inspector marks empty groups with 'empty' class name
  * ui.Inspector introduces previewMode option that when set, makes select-box, select-button-group and color-palette types trigger changes with dry flag set
  * ui.Inspector introduces custom operators (apart from the built-in primitive one such as 'eq', 'lt', ...) for more flexible definition of what fields should be hidden based on other fields
  * layout.TreeLayout now takes into account 'margin' property set on elements (extending the current set 'siblingRank', 'rankDir', 'hidden' and 'offsetX')
  * removed dependency on Handlebars
  * add minWidth, maxWidth, minHeight and maxHeight to ui.FreeTransform
  * add allowOrthogonalResize, allowRotation and preserveAspectRatio options to ui.FreeTransform
  * add hasHandle() method to ui.Halo
  * ui.Halo introduces 'attrs' object when adding handles via addHandle() to set custom attributes on the generated handles HTML
  * ui.Halo introduces 'attrs' object for each button to set custom attributes on the generated button HTML
  * ui.Halo introduces new types 'toolbar', 'pie' and 'surrounding'
  * ui.Halo boxContent now accepts either a function or a string or a falsy value
  * ui.Halo introduces clearAll option that when false, does not clear other Halos when initialized
  * ui.Halo introduces 'clone' option that can be passed a function that should clone an element when needed
  * ui.Halo sets 'selected' CSS class to handles that are being selected
  * ui.Halo introduces 'icon' and 'iconSelected' options on handles for specifying icons for both unselected and selected states
  * ui.Halo has a new method isOpen() for checking whether it's open or not
  * ui.Halo adds selectHandle(), deselectHandle(), toggleHandle() and deselectAllHandles() methods
  * ui.Tooltip sets 'rendered' class once rendered to allow CSS animations to be set
  * fixed ui.Tooltip for scrolled page
  * ui.SelectionView now does a proper cleanup when removed, including unbinding DOM event listeners
  * ui.Stencil implements seamless drag&drop with highlighting right during the dragging action, not only after drop
  * ui.Stencil adds setPaper() method allowing for dynamically switching the target paper
  * ui.Stencil is now better integrated with ui.PaperScroller that can be passed to it in the 'paper' option allowing the ui.Stencil to better recognize elements dropped outside the paper area
  * fixed using multiple ui.Navigator widgets on the same page
  * fixed joint.shapes.bpmn.Pool label position and text overflow in other BPMN shapes
  * new include schema with rappid.js and rappid.css
  * improvements in KitchenSink (previously called Rappid demo) and BPMNEditor demo applications
  * layout.DirectedGraph upgrades Dagre to v0.7.1
  * layout.DirectedGraph introduces new option 'resizeClusters' to reposition and resize cluster elements (parents of other elements) so that they embody their children
  * cells get removeProp() method for removing - possibly nested - properties
  * cells get new addTo() method as a syntactic sugar for adding them to joint.dia.Graph
  * prop() methods on cells now accepts 'undefined' as a value (instead of behaving like a getter)
  * remove() method now correctly propagates the options object to all listeners
  * routers.Manhattan router was improved to cope with hierarchical diagrams with embedded elements and does not consider ancestors of elements as obstacles
  * routers.Manhattan router got smarter, finding better paths between source and target of a link
  * new router for links 'oneSide' that always routes links to/from a certain side specified
  * new 'jumpover' connector type
  * Vectorizer adds sample() method for interpolating any SVG path with discrete equidistant points
  * Vectorizer adds convertToPath(), convertToPathData() and findIntersection() functions
  * Vectorizer adds findAnnotationsAtIndex(), findAnnotationsBetweenIndexes() and shiftAnnotations() helper functions manipulating text annotations (see Vectorizer:text())
  * Vectorizer now sets 'v-line' class to all text lines rendered with text() and 'v-empty-line' for lines that are empty
  * Vectorizer find() now returns an array of vectorizer elements, not the DOM NodeList
  * Vectorizer V() function now throws an error if invalid markup is given to it making wrong shape definitons visible to the programmer
  * Vectorizer bbox() now does not round values making calculations more precise
  * Geometry adds rect:equals(), rect:snapToGrid() and rect:intersect() functions
  * Geometry adds clone() method to all objects
  * new events in joint.dia.Paper link:pointerdown, link:pointerdown, link:pointermove, link:pointerup, element:pointerdown, element:pointermove, element:pointerup
  * new events in joint.dia.Paper cell:contextmenu and blank:contextmenu
  * new maxWidth and maxHeight options in joint.dia.Paper fitToContent() method
  * joint.dia.Paper adds labelMove option to the 'interactive' object for enabling moving labels via UI
  * joint.dia.Paper findViewByModel() significantly improved performance
  * fixes in joint.dia.Paper async rendering
  * new 'restrictTranslate' option in joint.dia.Paper for restricting movement of elements
  * joint.dia.Paper introduces new 'cellViewNamespace' option for declaring custom namespace for views (defaults to 'joint.shapes')
  * joint.dia.Paper 'elementView' and 'linkView' options can be now functions
  * joint.dia.Paper introduces new 'defaultRouter' and 'defaultConnector' options
  * joint.dia.Paper introduces new 'linkPinning' option to disable creating links without source/target
  * joint.dia.Paper now ignores mouse events that are not relevant (events that do not target the internal SVG document or a cell)
  * joint.dia.Paper remove() make a proper cleanup of all views
  * fixed using multiple joint.dia.Paper objects on the same page so that they don't share any options
  * fixed normalization of touch events that now expose stopPropagation() and preventDefault() as all other events do
  * new method findModelsUnderElement() in joint.dia.Graph for finding elements below another element
  * joint.dia.Graph fixes the fetch() method
  * joint.dia.Graph introduces new 'cellNamespace' option for declaring custom namespace for models (defaults to 'joint.shapes')
  * joint.dia.Graph adds new method getCells()
  * joint.dia.Graph getNeighbors() method improved and extended with 'deep' option to better support hierarchical diagrams containing embedded elements
  * joint.dia.Link adds offset property on labels and implements dragging labels off the links
  * joint.dia.Element adds fitEmbeds() method for resizing the element so that it fits all the embedded elements inside it
  * joint.dia.ElementView getBBox() now returns the rect object of Geometry library that directly exposes various math functions for rectangles
  * new joint.util.getElementBBox() function for getting a bounding box of both HTML and SVG elements
  * new joint.util.normalizSides() function
  * new joint.util.sortElements() function for sorting DOM elements
  * add an optional context parameter to joint.util.nextFrame()
  * new filters joint.filter.outline and joint.filter.highlight
  * special JointJS attributes ref-x, ref-y, ref-width and ref-height can be specified in percentages
  * joint.dia.Link routers and connector can be now specified as functions
  * source code passed through JSCS checker, fixed coding style and indentation
  * Lodash upgraded to the latest version v3.10.1
  * Backbone upgraded to v1.2.1
  * make JointJS compatible with Browserify, Webpack and RequireJS
  * other fixes and improvements

v1.5.1 - 02-23-2015
  * ui.Tooltip 'trigger' option (values: 'click', 'focus', 'hover' [default], 'manual')
  * ui.Tooltip 'viewport' option (e.g. viewport: { selector: '.mycontainer', padding: 10 } keeps the tooltip within boundaries of .mycontainer)
  * create a clean version (sans Handlebars) of ui.Halo, ui.Stencil, ui.Inspector and ui.FreeTransform
  * ui.Stencil 'dropAnimation' option (if true, drop to invalid area returns element back to stencil in an animated fashion)
  * ui.Stencil now disregards elements dropped into the stencil area
  * ui.SelectBox new widget for creating dropdowns (with keyboard navigation support and different opening options)
  * ui.ColorPalette new widget for color palette dropdown
  * ui.SelectButtonGroup new widget for creating group of buttons (with multi or single selection support)
  * ui.Inspector has new built-in types (select-box, select-button-group and color-palette)
  * improvements in ui.SelectionView
  * ui.SelectionView now adds a method destroyAllSelectionBoxes()
  * improvements in ui.PaperScroller panning
  * ui.Inspector introduces renderFieldContent() and getFieldValue() options for easier custom defined fields
  * propagate options object in dia.Paper async mode
  * ui.PaperScroller adds contentOptions, baseWidth and baseHeight options
  * dia.Paper enables specifying paddings in fitToContent()
  * layout.TreeLayout prevents relayout when cloning
  * ui.Stencil triggers 'drop:invalid' event when element is dropped outside the paper area
  * dia.Paper adds clientToLocalPoint() method
  * ui.Stencil now properly cleans up all the internal papers in remove()
  * ui.SelectionView fixes selection of unexisting views
  * other small bug fixes and improvements

v1.5.0 - 02-03-2015 "Amsterdam"
  * ui.TextEditor plugin for inline editing texts
  * layout.TreeLayout plugin for auto-layouting graphs in a tree
  * ui.TreeLayoutView plugin for interacting with trees
  * ui.Dialog plugin displaying both modal and non-modal dialog boxes
  * ui.Navigator plugin for displaying interactive small view into a large diagram
  * storage.Local plugin for storing graphs, cells and any other documents in local storage
  * alg.Dijkstra plugin for an efficient finding of the shortest path in a graph
  * alg.PriorityQueue plugin implementing the priority queue data structure
  * charts.Matrix for visualization co-occurences in a matrix
  * improvements and bug fixes in ui.Inspector
  * bug fixes in format.SVG and format.PNG export plugins
  * add cell:highlight and cell:unhilight events to dia.Paper for custom highlithing
  * add isEmbeddedIn() method to dia.Element and dia.Link
  * introduce "deep" option in toFront() and toBack() methods on cells
  * introduce validateEmbedding() optional function on dia.Paper
  * add getCommonAncestor() method to dia.Graph
  * add reparent() method to dia.Link
  * add getEmbeddedCells() with "deep", "breadthFirst" options to dia.Element
  * extend getConnectedLink() method on dia.Graph with "deep" option
  * add "filter" option to ui.Snaplines
  * add joint.util.breakText() function for auto-breaking text into lines
  * add getBBox() method to dia.Graph for finding the compound bounding box of more elements
  * add cell:mouseover and cell:mouseout events to dia.Paper
  * add isLink() method to cells for a quick check if cell is a link or an element
  * add shortestPath() method to dia.GraphUtils
  * add new special attributes "ref-width" and "ref-height"
  * add support for text along paths to Vectorizer and also via cell attrs
  * add new options parameter to dia.Element:translate()
  * add "useModelGeometry" parameter to ui.SelectionView
  * add new "fitToContent" options "minWidth" and "minHeight" in dia.Paper
  * expose "defs", "viewport" and "svg" properties on dia.Paper
  * add example application on using JointJS/Rappid with AngularJS
  * many other improvements and bug fixes

v1.4.0 - 15-09-2014 "Lisbon"
  * introduce chart.Pie shape for displaying interactive Pie Charts
  * introduce chart.Knob shape for displaying knobs
  * add new ui.Snaplines plugin for helping aligning elements
  * introduce instant full-text search in ui.Stencil
  * introduce rotateAngleGrid option in ui.Halo for specifying the rotation snapping angle
  * extend interactive option in dia.Paper for finer control over the interactivity of links
  * improve interaction with Halo tools on touch devices
  * fix and improve SVG and Raster exports
  * introduce tools in ui.SelectionView for group manipulation the same way as in ui.Halo
  * add getBBox(elements) method to dia.Graph for returning bounding box of all the elements in the parameter
  * allow embedding links to elements in order to translate their vertices if the parent moves
  * introduce translate() method on links for translating all vertices (and source/target if they are points)
  * add extra parameter in dia.Element rotate() method for rotating around custom origin
  * introduce linkConnectionPoint() function in dia.Paper options for custom definition of link sticky points
  * introduce findView() method on cells for easier lookup of paper views
  * introduce addTo() method on cells for quicker adding cells to the graph
  * introduce scaleContentToFit() method on dia.Paper
  * add openAsPNG() method to format.Raster plugin
  * improve ui.PaperScroller zoom() method
  * implement sendToken() method on the link view for sending animated tokens along links
  * add prop() method to elements and links for easier setting of custom data, potentially nested
  * upgrade Backbone to v1.1.2
  * allow external function for setting positions and vertices in layout.DirectedGraph plugin
  * introduce dia.GraphUtils plugin with constructTree() function for constructing trees from JSON
  * add min, max and step attributes to the number type in ui.Inspector
  * introduce markAvailable option on dia.Paper for highlighting available elements/ports while reconnecting
  * extend padding option in format.Print plugin to allow for setting different padding for different sides
  * introduce expressions in Inspector when clause
  * introduce origin option and setOrigin() on dia.Paper
  * simplify initialization of ui.PaperScroller
  * introduce useModelGeometry option in ui.Halo
  * add basic.Rhombus shape
  * allow for value/content pair definitions of the options list of the select type in Inspector
  * add new geometry functions: point.bearing, point.reflection, line.bearing, line.pointAt, rect.containsRect, rect.normalize, rect.bbox
  * plenty of other bug fixes and improvements
